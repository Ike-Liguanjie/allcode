#  2023年11月20日
1.etcd是什么？它和redis的区别是什么？
etcd是一个高可用的分布式KV数据库，采用raft算法来保证数据的强一致性。
与redis的区别
一致性：etcd是通过raft算法保证一致性，redis是通过主从复制来保证一致性，但是这个并不是redis的强项
持久性：etcd将数据写入磁盘，再通过raft算法保证了数据永不丢失。redis是写入内存，但是也有RDB和AOF两种方法来进行数据持久化。
数据类型：etcd是简单的KV，而redis支持字符串、链表、字典、跳跃表、集合等数据结构，能满足更多业务场景。
综上来说，redis能满足的业务场景更广泛，而且在对于频繁读写尤其是海量读取的场景下，redis的性能更好。而etcd更能保证数据的一致性，所以究竟采用哪种数据库需要根据具体的业务来决定。
2.kratos框架介绍
这是一个用go语言实现的微服务框架，为了满足各种场景的需求，框架将所有服务拆分做成不同的库，用户可以自由选择组合使用其中的各种功能。
框架实现了日志、认证、路由管理与负载均衡、限流器等功能，采用protobuf进行API通信，提供了丰富的CLI指令，可以迅速生成代码文件，快速搭起一个服务。

# 2024年1月2日
1.golang中MAP的实现
// A header for a Go map.
type hmap struct {
    count     int
    // 代表哈希表中的元素个数，调用len(map)时，返回的就是该字段值。
    flags     uint8
    // 状态标志，下文常量中会解释四种状态位含义。
    B         uint8
    // buckets（桶）的对数log_2
    // 如果B=5，则buckets数组的长度 = 2^5=32，意味着有32个桶
    noverflow uint16
    // 溢出桶的大概数量
    hash0     uint32
    // 哈希种子

    buckets    unsafe.Pointer
    // 指向buckets数组的指针，数组大小为2^B，如果元素个数为0，它为nil。
    oldbuckets unsafe.Pointer
    // 如果发生扩容，oldbuckets是指向老的buckets数组的指针，老的buckets数组大小是新的buckets的1/2;非扩容状态下，它为nil。
    nevacuate  uintptr
    // 表示扩容进度，小于此地址的buckets代表已搬迁完成。

    extra *mapextra
    // 这个字段是为了优化GC扫描而设计的。当key和value均不包含指针，并且都可以inline时使用。extra是指向mapextra类型的指针。
 }
